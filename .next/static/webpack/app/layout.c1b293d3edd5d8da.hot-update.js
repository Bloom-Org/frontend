"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./graphql/generated.ts":
/*!******************************!*\
  !*** ./graphql/generated.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddProfileInterestsDocument: function() { return /* binding */ AddProfileInterestsDocument; },\n/* harmony export */   AmountFieldsFragmentDoc: function() { return /* binding */ AmountFieldsFragmentDoc; },\n/* harmony export */   AnyPublicationMetadataFieldsFragmentDoc: function() { return /* binding */ AnyPublicationMetadataFieldsFragmentDoc; },\n/* harmony export */   ArticleMetadataV3FieldsFragmentDoc: function() { return /* binding */ ArticleMetadataV3FieldsFragmentDoc; },\n/* harmony export */   AudioFieldsFragmentDoc: function() { return /* binding */ AudioFieldsFragmentDoc; },\n/* harmony export */   AudioMetadataV3FieldsFragmentDoc: function() { return /* binding */ AudioMetadataV3FieldsFragmentDoc; },\n/* harmony export */   AuthenticateDocument: function() { return /* binding */ AuthenticateDocument; },\n/* harmony export */   BlockDocument: function() { return /* binding */ BlockDocument; },\n/* harmony export */   BroadcastOnMomokaDocument: function() { return /* binding */ BroadcastOnMomokaDocument; },\n/* harmony export */   BroadcastOnchainDocument: function() { return /* binding */ BroadcastOnchainDocument; },\n/* harmony export */   ChallengeDocument: function() { return /* binding */ ChallengeDocument; },\n/* harmony export */   ChangeProfileManagerActionType: function() { return /* binding */ ChangeProfileManagerActionType; },\n/* harmony export */   CheckingInMetadataV3FieldsFragmentDoc: function() { return /* binding */ CheckingInMetadataV3FieldsFragmentDoc; },\n/* harmony export */   ClaimProfileStatusType: function() { return /* binding */ ClaimProfileStatusType; },\n/* harmony export */   ClaimProfileWithHandleErrorReasonType: function() { return /* binding */ ClaimProfileWithHandleErrorReasonType; },\n/* harmony export */   CollectOpenActionModuleType: function() { return /* binding */ CollectOpenActionModuleType; },\n/* harmony export */   CommentRankingFilterType: function() { return /* binding */ CommentRankingFilterType; },\n/* harmony export */   ComparisonOperatorConditionType: function() { return /* binding */ ComparisonOperatorConditionType; },\n/* harmony export */   CreateBlockProfilesTypedDataDocument: function() { return /* binding */ CreateBlockProfilesTypedDataDocument; },\n/* harmony export */   CreateOnchainSetProfileMetadataTypedDataDocument: function() { return /* binding */ CreateOnchainSetProfileMetadataTypedDataDocument; },\n/* harmony export */   CreateProfileWithHandleDocument: function() { return /* binding */ CreateProfileWithHandleDocument; },\n/* harmony export */   CreateProfileWithHandleErrorReasonType: function() { return /* binding */ CreateProfileWithHandleErrorReasonType; },\n/* harmony export */   CreateUnblockProfilesTypedDataDocument: function() { return /* binding */ CreateUnblockProfilesTypedDataDocument; },\n/* harmony export */   CustomFiltersType: function() { return /* binding */ CustomFiltersType; },\n/* harmony export */   DecryptFailReasonType: function() { return /* binding */ DecryptFailReasonType; },\n/* harmony export */   DismissRecommendedProfilesDocument: function() { return /* binding */ DismissRecommendedProfilesDocument; },\n/* harmony export */   EmbedMetadataV3FieldsFragmentDoc: function() { return /* binding */ EmbedMetadataV3FieldsFragmentDoc; },\n/* harmony export */   EncryptableAudioFieldsFragmentDoc: function() { return /* binding */ EncryptableAudioFieldsFragmentDoc; },\n/* harmony export */   EncryptableAudioSetFieldsFragmentDoc: function() { return /* binding */ EncryptableAudioSetFieldsFragmentDoc; },\n/* harmony export */   EncryptableImageFieldsFragmentDoc: function() { return /* binding */ EncryptableImageFieldsFragmentDoc; },\n/* harmony export */   EncryptableImageSetFieldsFragmentDoc: function() { return /* binding */ EncryptableImageSetFieldsFragmentDoc; },\n/* harmony export */   EncryptableVideoFieldsFragmentDoc: function() { return /* binding */ EncryptableVideoFieldsFragmentDoc; },\n/* harmony export */   EncryptableVideoSetFieldsFragmentDoc: function() { return /* binding */ EncryptableVideoSetFieldsFragmentDoc; },\n/* harmony export */   Erc20FieldsFragmentDoc: function() { return /* binding */ Erc20FieldsFragmentDoc; },\n/* harmony export */   EventMetadataV3FieldsFragmentDoc: function() { return /* binding */ EventMetadataV3FieldsFragmentDoc; },\n/* harmony export */   ExploreProfilesOrderByType: function() { return /* binding */ ExploreProfilesOrderByType; },\n/* harmony export */   ExplorePublicationType: function() { return /* binding */ ExplorePublicationType; },\n/* harmony export */   ExplorePublicationsOrderByType: function() { return /* binding */ ExplorePublicationsOrderByType; },\n/* harmony export */   FeedEventItemType: function() { return /* binding */ FeedEventItemType; },\n/* harmony export */   FollowModuleFieldsFragmentDoc: function() { return /* binding */ FollowModuleFieldsFragmentDoc; },\n/* harmony export */   FollowModuleType: function() { return /* binding */ FollowModuleType; },\n/* harmony export */   GetDefaultProfileDocument: function() { return /* binding */ GetDefaultProfileDocument; },\n/* harmony export */   GetInvitedProfilesDocument: function() { return /* binding */ GetInvitedProfilesDocument; },\n/* harmony export */   HandleInfoFragmentDoc: function() { return /* binding */ HandleInfoFragmentDoc; },\n/* harmony export */   IdKitPhoneVerifyWebhookResultStatusType: function() { return /* binding */ IdKitPhoneVerifyWebhookResultStatusType; },\n/* harmony export */   ImageFieldsFragmentDoc: function() { return /* binding */ ImageFieldsFragmentDoc; },\n/* harmony export */   ImageMetadataV3FieldsFragmentDoc: function() { return /* binding */ ImageMetadataV3FieldsFragmentDoc; },\n/* harmony export */   ImageSetFieldsFragmentDoc: function() { return /* binding */ ImageSetFieldsFragmentDoc; },\n/* harmony export */   LensProfileManagerRelayErrorReasonType: function() { return /* binding */ LensProfileManagerRelayErrorReasonType; },\n/* harmony export */   LensProtocolVersion: function() { return /* binding */ LensProtocolVersion; },\n/* harmony export */   LensTransactionFailureType: function() { return /* binding */ LensTransactionFailureType; },\n/* harmony export */   LensTransactionStatusDocument: function() { return /* binding */ LensTransactionStatusDocument; },\n/* harmony export */   LensTransactionStatusType: function() { return /* binding */ LensTransactionStatusType; },\n/* harmony export */   LimitType: function() { return /* binding */ LimitType; },\n/* harmony export */   LinkMetadataV3FieldsFragmentDoc: function() { return /* binding */ LinkMetadataV3FieldsFragmentDoc; },\n/* harmony export */   LiveStreamMetadataV3FieldsFragmentDoc: function() { return /* binding */ LiveStreamMetadataV3FieldsFragmentDoc; },\n/* harmony export */   MarketplaceMetadataAttributeDisplayType: function() { return /* binding */ MarketplaceMetadataAttributeDisplayType; },\n/* harmony export */   MetadataAttributeFieldsFragmentDoc: function() { return /* binding */ MetadataAttributeFieldsFragmentDoc; },\n/* harmony export */   MetadataAttributeType: function() { return /* binding */ MetadataAttributeType; },\n/* harmony export */   MintMetadataV3FieldsFragmentDoc: function() { return /* binding */ MintMetadataV3FieldsFragmentDoc; },\n/* harmony export */   MomokaValidatorError: function() { return /* binding */ MomokaValidatorError; },\n/* harmony export */   NetworkAddressFieldsFragmentDoc: function() { return /* binding */ NetworkAddressFieldsFragmentDoc; },\n/* harmony export */   NftCollectionFieldsFragmentDoc: function() { return /* binding */ NftCollectionFieldsFragmentDoc; },\n/* harmony export */   NftCollectionOwnersOrder: function() { return /* binding */ NftCollectionOwnersOrder; },\n/* harmony export */   NftContractType: function() { return /* binding */ NftContractType; },\n/* harmony export */   NftFieldsFragmentDoc: function() { return /* binding */ NftFieldsFragmentDoc; },\n/* harmony export */   NftGalleryFieldsFragmentDoc: function() { return /* binding */ NftGalleryFieldsFragmentDoc; },\n/* harmony export */   NftMetadataAttributeFieldsFragmentDoc: function() { return /* binding */ NftMetadataAttributeFieldsFragmentDoc; },\n/* harmony export */   NftMetadataFieldsFragmentDoc: function() { return /* binding */ NftMetadataFieldsFragmentDoc; },\n/* harmony export */   NftOwnerFieldsFragmentDoc: function() { return /* binding */ NftOwnerFieldsFragmentDoc; },\n/* harmony export */   NftsDocument: function() { return /* binding */ NftsDocument; },\n/* harmony export */   NotificationType: function() { return /* binding */ NotificationType; },\n/* harmony export */   OpenActionCategoryType: function() { return /* binding */ OpenActionCategoryType; },\n/* harmony export */   OpenActionModuleType: function() { return /* binding */ OpenActionModuleType; },\n/* harmony export */   PoapTokenLayerType: function() { return /* binding */ PoapTokenLayerType; },\n/* harmony export */   PopularNftCollectionsOrder: function() { return /* binding */ PopularNftCollectionsOrder; },\n/* harmony export */   ProfileActionHistoryDocument: function() { return /* binding */ ProfileActionHistoryDocument; },\n/* harmony export */   ProfileActionHistoryType: function() { return /* binding */ ProfileActionHistoryType; },\n/* harmony export */   ProfileAlreadyInvitedDocument: function() { return /* binding */ ProfileAlreadyInvitedDocument; },\n/* harmony export */   ProfileDocument: function() { return /* binding */ ProfileDocument; },\n/* harmony export */   ProfileFieldsFragmentDoc: function() { return /* binding */ ProfileFieldsFragmentDoc; },\n/* harmony export */   ProfileInterestTypes: function() { return /* binding */ ProfileInterestTypes; },\n/* harmony export */   ProfileRecommendationsDocument: function() { return /* binding */ ProfileRecommendationsDocument; },\n/* harmony export */   ProfilesDocument: function() { return /* binding */ ProfilesDocument; },\n/* harmony export */   ProfilesManagedDocument: function() { return /* binding */ ProfilesManagedDocument; },\n/* harmony export */   PublicationContentWarningType: function() { return /* binding */ PublicationContentWarningType; },\n/* harmony export */   PublicationMetadataLicenseType: function() { return /* binding */ PublicationMetadataLicenseType; },\n/* harmony export */   PublicationMetadataMainFocusType: function() { return /* binding */ PublicationMetadataMainFocusType; },\n/* harmony export */   PublicationMetadataMediaAudioFieldsFragmentDoc: function() { return /* binding */ PublicationMetadataMediaAudioFieldsFragmentDoc; },\n/* harmony export */   PublicationMetadataMediaImageFieldsFragmentDoc: function() { return /* binding */ PublicationMetadataMediaImageFieldsFragmentDoc; },\n/* harmony export */   PublicationMetadataMediaVideoFieldsFragmentDoc: function() { return /* binding */ PublicationMetadataMediaVideoFieldsFragmentDoc; },\n/* harmony export */   PublicationMetadataTransactionType: function() { return /* binding */ PublicationMetadataTransactionType; },\n/* harmony export */   PublicationReactionType: function() { return /* binding */ PublicationReactionType; },\n/* harmony export */   PublicationReportingFraudSubreason: function() { return /* binding */ PublicationReportingFraudSubreason; },\n/* harmony export */   PublicationReportingIllegalSubreason: function() { return /* binding */ PublicationReportingIllegalSubreason; },\n/* harmony export */   PublicationReportingReason: function() { return /* binding */ PublicationReportingReason; },\n/* harmony export */   PublicationReportingSensitiveSubreason: function() { return /* binding */ PublicationReportingSensitiveSubreason; },\n/* harmony export */   PublicationReportingSpamSubreason: function() { return /* binding */ PublicationReportingSpamSubreason; },\n/* harmony export */   PublicationType: function() { return /* binding */ PublicationType; },\n/* harmony export */   ReferenceModuleType: function() { return /* binding */ ReferenceModuleType; },\n/* harmony export */   RefreshDocument: function() { return /* binding */ RefreshDocument; },\n/* harmony export */   RefreshPublicationMetadataResultType: function() { return /* binding */ RefreshPublicationMetadataResultType; },\n/* harmony export */   RelayErrorReasonType: function() { return /* binding */ RelayErrorReasonType; },\n/* harmony export */   RelayRoleKey: function() { return /* binding */ RelayRoleKey; },\n/* harmony export */   RemoveProfileInterestsDocument: function() { return /* binding */ RemoveProfileInterestsDocument; },\n/* harmony export */   SearchPublicationType: function() { return /* binding */ SearchPublicationType; },\n/* harmony export */   SetDefaultProfileDocument: function() { return /* binding */ SetDefaultProfileDocument; },\n/* harmony export */   SetProfileMetadataDocument: function() { return /* binding */ SetProfileMetadataDocument; },\n/* harmony export */   SpaceMetadataV3FieldsFragmentDoc: function() { return /* binding */ SpaceMetadataV3FieldsFragmentDoc; },\n/* harmony export */   StoryMetadataV3FieldsFragmentDoc: function() { return /* binding */ StoryMetadataV3FieldsFragmentDoc; },\n/* harmony export */   SupportedFiatType: function() { return /* binding */ SupportedFiatType; },\n/* harmony export */   TagSortCriteriaType: function() { return /* binding */ TagSortCriteriaType; },\n/* harmony export */   TextOnlyMetadataV3FieldsFragmentDoc: function() { return /* binding */ TextOnlyMetadataV3FieldsFragmentDoc; },\n/* harmony export */   ThreeDMetadataV3FieldsFragmentDoc: function() { return /* binding */ ThreeDMetadataV3FieldsFragmentDoc; },\n/* harmony export */   TransactionMetadataV3FieldsFragmentDoc: function() { return /* binding */ TransactionMetadataV3FieldsFragmentDoc; },\n/* harmony export */   TriStateValue: function() { return /* binding */ TriStateValue; },\n/* harmony export */   TxIdToTxHashDocument: function() { return /* binding */ TxIdToTxHashDocument; },\n/* harmony export */   UnblockDocument: function() { return /* binding */ UnblockDocument; },\n/* harmony export */   UserSigNoncesDocument: function() { return /* binding */ UserSigNoncesDocument; },\n/* harmony export */   VerifyDocument: function() { return /* binding */ VerifyDocument; },\n/* harmony export */   VideoFieldsFragmentDoc: function() { return /* binding */ VideoFieldsFragmentDoc; },\n/* harmony export */   VideoMetadataV3FieldsFragmentDoc: function() { return /* binding */ VideoMetadataV3FieldsFragmentDoc; },\n/* harmony export */   WhoHaveBlockedDocument: function() { return /* binding */ WhoHaveBlockedDocument; },\n/* harmony export */   WorldcoinPhoneVerifyType: function() { return /* binding */ WorldcoinPhoneVerifyType; },\n/* harmony export */   useAddProfileInterestsMutation: function() { return /* binding */ useAddProfileInterestsMutation; },\n/* harmony export */   useAuthenticateMutation: function() { return /* binding */ useAuthenticateMutation; },\n/* harmony export */   useBlockMutation: function() { return /* binding */ useBlockMutation; },\n/* harmony export */   useBroadcastOnMomokaMutation: function() { return /* binding */ useBroadcastOnMomokaMutation; },\n/* harmony export */   useBroadcastOnchainMutation: function() { return /* binding */ useBroadcastOnchainMutation; },\n/* harmony export */   useChallengeQuery: function() { return /* binding */ useChallengeQuery; },\n/* harmony export */   useCreateBlockProfilesTypedDataMutation: function() { return /* binding */ useCreateBlockProfilesTypedDataMutation; },\n/* harmony export */   useCreateOnchainSetProfileMetadataTypedDataMutation: function() { return /* binding */ useCreateOnchainSetProfileMetadataTypedDataMutation; },\n/* harmony export */   useCreateProfileWithHandleMutation: function() { return /* binding */ useCreateProfileWithHandleMutation; },\n/* harmony export */   useCreateUnblockProfilesTypedDataMutation: function() { return /* binding */ useCreateUnblockProfilesTypedDataMutation; },\n/* harmony export */   useDismissRecommendedProfilesMutation: function() { return /* binding */ useDismissRecommendedProfilesMutation; },\n/* harmony export */   useGetDefaultProfileQuery: function() { return /* binding */ useGetDefaultProfileQuery; },\n/* harmony export */   useGetInvitedProfilesQuery: function() { return /* binding */ useGetInvitedProfilesQuery; },\n/* harmony export */   useLensTransactionStatusQuery: function() { return /* binding */ useLensTransactionStatusQuery; },\n/* harmony export */   useNftsQuery: function() { return /* binding */ useNftsQuery; },\n/* harmony export */   useProfileActionHistoryQuery: function() { return /* binding */ useProfileActionHistoryQuery; },\n/* harmony export */   useProfileAlreadyInvitedQuery: function() { return /* binding */ useProfileAlreadyInvitedQuery; },\n/* harmony export */   useProfileQuery: function() { return /* binding */ useProfileQuery; },\n/* harmony export */   useProfileRecommendationsQuery: function() { return /* binding */ useProfileRecommendationsQuery; },\n/* harmony export */   useProfilesManagedQuery: function() { return /* binding */ useProfilesManagedQuery; },\n/* harmony export */   useProfilesQuery: function() { return /* binding */ useProfilesQuery; },\n/* harmony export */   useRefreshMutation: function() { return /* binding */ useRefreshMutation; },\n/* harmony export */   useRemoveProfileInterestsMutation: function() { return /* binding */ useRemoveProfileInterestsMutation; },\n/* harmony export */   useSetDefaultProfileMutation: function() { return /* binding */ useSetDefaultProfileMutation; },\n/* harmony export */   useSetProfileMetadataMutation: function() { return /* binding */ useSetProfileMetadataMutation; },\n/* harmony export */   useTxIdToTxHashQuery: function() { return /* binding */ useTxIdToTxHashQuery; },\n/* harmony export */   useUnblockMutation: function() { return /* binding */ useUnblockMutation; },\n/* harmony export */   useUserSigNoncesQuery: function() { return /* binding */ useUserSigNoncesQuery; },\n/* harmony export */   useVerifyQuery: function() { return /* binding */ useVerifyQuery; },\n/* harmony export */   useWhoHaveBlockedQuery: function() { return /* binding */ useWhoHaveBlockedQuery; }\n/* harmony export */ });\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n\nfunction fetcher(endpoint, requestInit, query, variables) {\n    return async ()=>{\n        const res = await fetch(endpoint, {\n            method: \"POST\",\n            ...requestInit,\n            body: JSON.stringify({\n                query,\n                variables\n            })\n        });\n        const json = await res.json();\n        if (json.errors) {\n            const { message } = json.errors[0];\n            throw new Error(message);\n        }\n        return json.data;\n    };\n}\nvar ChangeProfileManagerActionType;\n(function(ChangeProfileManagerActionType) {\n    ChangeProfileManagerActionType[\"Add\"] = \"ADD\";\n    ChangeProfileManagerActionType[\"Remove\"] = \"REMOVE\";\n})(ChangeProfileManagerActionType || (ChangeProfileManagerActionType = {}));\nvar ClaimProfileStatusType;\n(function(ClaimProfileStatusType) {\n    ClaimProfileStatusType[\"AlreadyClaimed\"] = \"ALREADY_CLAIMED\";\n    ClaimProfileStatusType[\"ClaimFailed\"] = \"CLAIM_FAILED\";\n    ClaimProfileStatusType[\"NotClaimed\"] = \"NOT_CLAIMED\";\n})(ClaimProfileStatusType || (ClaimProfileStatusType = {}));\nvar ClaimProfileWithHandleErrorReasonType;\n(function(ClaimProfileWithHandleErrorReasonType) {\n    ClaimProfileWithHandleErrorReasonType[\"CanNotFreeText\"] = \"CAN_NOT_FREE_TEXT\";\n    ClaimProfileWithHandleErrorReasonType[\"ClaimNotFound\"] = \"CLAIM_NOT_FOUND\";\n    ClaimProfileWithHandleErrorReasonType[\"ClaimNotLinkedToWallet\"] = \"CLAIM_NOT_LINKED_TO_WALLET\";\n    ClaimProfileWithHandleErrorReasonType[\"ClaimTimeExpired\"] = \"CLAIM_TIME_EXPIRED\";\n    ClaimProfileWithHandleErrorReasonType[\"ContractExecuted\"] = \"CONTRACT_EXECUTED\";\n    ClaimProfileWithHandleErrorReasonType[\"HandleAlreadyClaimed\"] = \"HANDLE_ALREADY_CLAIMED\";\n    ClaimProfileWithHandleErrorReasonType[\"HandleAlreadyExists\"] = \"HANDLE_ALREADY_EXISTS\";\n    ClaimProfileWithHandleErrorReasonType[\"HandleReserved\"] = \"HANDLE_RESERVED\";\n})(ClaimProfileWithHandleErrorReasonType || (ClaimProfileWithHandleErrorReasonType = {}));\nvar CollectOpenActionModuleType;\n(function(CollectOpenActionModuleType) {\n    CollectOpenActionModuleType[\"LegacyAaveFeeCollectModule\"] = \"LegacyAaveFeeCollectModule\";\n    CollectOpenActionModuleType[\"LegacyErc4626FeeCollectModule\"] = \"LegacyERC4626FeeCollectModule\";\n    CollectOpenActionModuleType[\"LegacyFeeCollectModule\"] = \"LegacyFeeCollectModule\";\n    CollectOpenActionModuleType[\"LegacyFreeCollectModule\"] = \"LegacyFreeCollectModule\";\n    CollectOpenActionModuleType[\"LegacyLimitedFeeCollectModule\"] = \"LegacyLimitedFeeCollectModule\";\n    CollectOpenActionModuleType[\"LegacyLimitedTimedFeeCollectModule\"] = \"LegacyLimitedTimedFeeCollectModule\";\n    CollectOpenActionModuleType[\"LegacyMultirecipientFeeCollectModule\"] = \"LegacyMultirecipientFeeCollectModule\";\n    CollectOpenActionModuleType[\"LegacyRevertCollectModule\"] = \"LegacyRevertCollectModule\";\n    CollectOpenActionModuleType[\"LegacySimpleCollectModule\"] = \"LegacySimpleCollectModule\";\n    CollectOpenActionModuleType[\"LegacyTimedFeeCollectModule\"] = \"LegacyTimedFeeCollectModule\";\n    CollectOpenActionModuleType[\"MultirecipientFeeCollectOpenActionModule\"] = \"MultirecipientFeeCollectOpenActionModule\";\n    CollectOpenActionModuleType[\"SimpleCollectOpenActionModule\"] = \"SimpleCollectOpenActionModule\";\n    CollectOpenActionModuleType[\"UnknownOpenActionModule\"] = \"UnknownOpenActionModule\";\n})(CollectOpenActionModuleType || (CollectOpenActionModuleType = {}));\nvar CommentRankingFilterType;\n(function(CommentRankingFilterType) {\n    CommentRankingFilterType[\"All\"] = \"ALL\";\n    CommentRankingFilterType[\"NoneRelevant\"] = \"NONE_RELEVANT\";\n    CommentRankingFilterType[\"Relevant\"] = \"RELEVANT\";\n})(CommentRankingFilterType || (CommentRankingFilterType = {}));\nvar ComparisonOperatorConditionType;\n(function(ComparisonOperatorConditionType) {\n    ComparisonOperatorConditionType[\"Equal\"] = \"EQUAL\";\n    ComparisonOperatorConditionType[\"GreaterThan\"] = \"GREATER_THAN\";\n    ComparisonOperatorConditionType[\"GreaterThanOrEqual\"] = \"GREATER_THAN_OR_EQUAL\";\n    ComparisonOperatorConditionType[\"LessThan\"] = \"LESS_THAN\";\n    ComparisonOperatorConditionType[\"LessThanOrEqual\"] = \"LESS_THAN_OR_EQUAL\";\n    ComparisonOperatorConditionType[\"NotEqual\"] = \"NOT_EQUAL\";\n})(ComparisonOperatorConditionType || (ComparisonOperatorConditionType = {}));\nvar CreateProfileWithHandleErrorReasonType;\n(function(CreateProfileWithHandleErrorReasonType) {\n    CreateProfileWithHandleErrorReasonType[\"Failed\"] = \"FAILED\";\n    CreateProfileWithHandleErrorReasonType[\"HandleTaken\"] = \"HANDLE_TAKEN\";\n})(CreateProfileWithHandleErrorReasonType || (CreateProfileWithHandleErrorReasonType = {}));\nvar CustomFiltersType;\n(function(CustomFiltersType) {\n    CustomFiltersType[\"Gardeners\"] = \"GARDENERS\";\n})(CustomFiltersType || (CustomFiltersType = {}));\nvar DecryptFailReasonType;\n(function(DecryptFailReasonType) {\n    DecryptFailReasonType[\"CanNotDecrypt\"] = \"CAN_NOT_DECRYPT\";\n    DecryptFailReasonType[\"CollectNotFinalisedOnChain\"] = \"COLLECT_NOT_FINALISED_ON_CHAIN\";\n    DecryptFailReasonType[\"DoesNotFollowProfile\"] = \"DOES_NOT_FOLLOW_PROFILE\";\n    DecryptFailReasonType[\"DoesNotOwnNft\"] = \"DOES_NOT_OWN_NFT\";\n    DecryptFailReasonType[\"DoesNotOwnProfile\"] = \"DOES_NOT_OWN_PROFILE\";\n    DecryptFailReasonType[\"FollowNotFinalisedOnChain\"] = \"FOLLOW_NOT_FINALISED_ON_CHAIN\";\n    DecryptFailReasonType[\"HasNotCollectedPublication\"] = \"HAS_NOT_COLLECTED_PUBLICATION\";\n    DecryptFailReasonType[\"MissingEncryptionParams\"] = \"MISSING_ENCRYPTION_PARAMS\";\n    DecryptFailReasonType[\"NotLoggedIn\"] = \"NOT_LOGGED_IN\";\n    DecryptFailReasonType[\"ProfileDoesNotExist\"] = \"PROFILE_DOES_NOT_EXIST\";\n    DecryptFailReasonType[\"PublicationIsNotGated\"] = \"PUBLICATION_IS_NOT_GATED\";\n    DecryptFailReasonType[\"UnauthorizedAddress\"] = \"UNAUTHORIZED_ADDRESS\";\n    DecryptFailReasonType[\"UnauthorizedBalance\"] = \"UNAUTHORIZED_BALANCE\";\n    DecryptFailReasonType[\"Unsupported\"] = \"UNSUPPORTED\";\n})(DecryptFailReasonType || (DecryptFailReasonType = {}));\nvar ExploreProfilesOrderByType;\n(function(ExploreProfilesOrderByType) {\n    ExploreProfilesOrderByType[\"CreatedOn\"] = \"CREATED_ON\";\n    ExploreProfilesOrderByType[\"LatestCreated\"] = \"LATEST_CREATED\";\n    ExploreProfilesOrderByType[\"MostCollects\"] = \"MOST_COLLECTS\";\n    ExploreProfilesOrderByType[\"MostComments\"] = \"MOST_COMMENTS\";\n    ExploreProfilesOrderByType[\"MostFollowers\"] = \"MOST_FOLLOWERS\";\n    ExploreProfilesOrderByType[\"MostMirrors\"] = \"MOST_MIRRORS\";\n    ExploreProfilesOrderByType[\"MostPosts\"] = \"MOST_POSTS\";\n    ExploreProfilesOrderByType[\"MostPublication\"] = \"MOST_PUBLICATION\";\n})(ExploreProfilesOrderByType || (ExploreProfilesOrderByType = {}));\nvar ExplorePublicationType;\n(function(ExplorePublicationType) {\n    ExplorePublicationType[\"Post\"] = \"POST\";\n    ExplorePublicationType[\"Quote\"] = \"QUOTE\";\n})(ExplorePublicationType || (ExplorePublicationType = {}));\nvar ExplorePublicationsOrderByType;\n(function(ExplorePublicationsOrderByType) {\n    ExplorePublicationsOrderByType[\"Latest\"] = \"LATEST\";\n    ExplorePublicationsOrderByType[\"LensCurated\"] = \"LENS_CURATED\";\n    ExplorePublicationsOrderByType[\"TopCollectedOpenAction\"] = \"TOP_COLLECTED_OPEN_ACTION\";\n    ExplorePublicationsOrderByType[\"TopCommented\"] = \"TOP_COMMENTED\";\n    ExplorePublicationsOrderByType[\"TopMirrored\"] = \"TOP_MIRRORED\";\n    ExplorePublicationsOrderByType[\"TopQuoted\"] = \"TOP_QUOTED\";\n})(ExplorePublicationsOrderByType || (ExplorePublicationsOrderByType = {}));\nvar FeedEventItemType;\n(function(FeedEventItemType) {\n    FeedEventItemType[\"Acted\"] = \"ACTED\";\n    FeedEventItemType[\"Collect\"] = \"COLLECT\";\n    FeedEventItemType[\"Comment\"] = \"COMMENT\";\n    FeedEventItemType[\"Mirror\"] = \"MIRROR\";\n    FeedEventItemType[\"Post\"] = \"POST\";\n    FeedEventItemType[\"Quote\"] = \"QUOTE\";\n    FeedEventItemType[\"Reaction\"] = \"REACTION\";\n})(FeedEventItemType || (FeedEventItemType = {}));\nvar FollowModuleType;\n(function(FollowModuleType) {\n    FollowModuleType[\"FeeFollowModule\"] = \"FeeFollowModule\";\n    FollowModuleType[\"RevertFollowModule\"] = \"RevertFollowModule\";\n    FollowModuleType[\"UnknownFollowModule\"] = \"UnknownFollowModule\";\n})(FollowModuleType || (FollowModuleType = {}));\nvar IdKitPhoneVerifyWebhookResultStatusType;\n(function(IdKitPhoneVerifyWebhookResultStatusType) {\n    IdKitPhoneVerifyWebhookResultStatusType[\"AlreadyVerified\"] = \"ALREADY_VERIFIED\";\n    IdKitPhoneVerifyWebhookResultStatusType[\"Success\"] = \"SUCCESS\";\n})(IdKitPhoneVerifyWebhookResultStatusType || (IdKitPhoneVerifyWebhookResultStatusType = {}));\nvar LensProfileManagerRelayErrorReasonType;\n(function(LensProfileManagerRelayErrorReasonType) {\n    LensProfileManagerRelayErrorReasonType[\"AppNotAllowed\"] = \"APP_NOT_ALLOWED\";\n    LensProfileManagerRelayErrorReasonType[\"Failed\"] = \"FAILED\";\n    LensProfileManagerRelayErrorReasonType[\"NotSponsored\"] = \"NOT_SPONSORED\";\n    LensProfileManagerRelayErrorReasonType[\"NoLensManagerEnabled\"] = \"NO_LENS_MANAGER_ENABLED\";\n    LensProfileManagerRelayErrorReasonType[\"RateLimited\"] = \"RATE_LIMITED\";\n    LensProfileManagerRelayErrorReasonType[\"RequiresSignature\"] = \"REQUIRES_SIGNATURE\";\n})(LensProfileManagerRelayErrorReasonType || (LensProfileManagerRelayErrorReasonType = {}));\nvar LensProtocolVersion;\n(function(LensProtocolVersion) {\n    LensProtocolVersion[\"V1\"] = \"V1\";\n    LensProtocolVersion[\"V2\"] = \"V2\";\n})(LensProtocolVersion || (LensProtocolVersion = {}));\nvar LensTransactionFailureType;\n(function(LensTransactionFailureType) {\n    LensTransactionFailureType[\"MetadataError\"] = \"METADATA_ERROR\";\n    LensTransactionFailureType[\"Reverted\"] = \"REVERTED\";\n})(LensTransactionFailureType || (LensTransactionFailureType = {}));\nvar LensTransactionStatusType;\n(function(LensTransactionStatusType) {\n    LensTransactionStatusType[\"Complete\"] = \"COMPLETE\";\n    LensTransactionStatusType[\"Failed\"] = \"FAILED\";\n    LensTransactionStatusType[\"OptimisticallyUpdated\"] = \"OPTIMISTICALLY_UPDATED\";\n    LensTransactionStatusType[\"Processing\"] = \"PROCESSING\";\n})(LensTransactionStatusType || (LensTransactionStatusType = {}));\nvar LimitType;\n(function(LimitType) {\n    LimitType[\"Fifty\"] = \"Fifty\";\n    LimitType[\"Ten\"] = \"Ten\";\n    LimitType[\"TwentyFive\"] = \"TwentyFive\";\n})(LimitType || (LimitType = {}));\nvar MarketplaceMetadataAttributeDisplayType;\n(function(MarketplaceMetadataAttributeDisplayType) {\n    MarketplaceMetadataAttributeDisplayType[\"Date\"] = \"DATE\";\n    MarketplaceMetadataAttributeDisplayType[\"Number\"] = \"NUMBER\";\n    MarketplaceMetadataAttributeDisplayType[\"String\"] = \"STRING\";\n})(MarketplaceMetadataAttributeDisplayType || (MarketplaceMetadataAttributeDisplayType = {}));\nvar MetadataAttributeType;\n(function(MetadataAttributeType) {\n    MetadataAttributeType[\"Boolean\"] = \"BOOLEAN\";\n    MetadataAttributeType[\"Date\"] = \"DATE\";\n    MetadataAttributeType[\"Json\"] = \"JSON\";\n    MetadataAttributeType[\"Number\"] = \"NUMBER\";\n    MetadataAttributeType[\"String\"] = \"STRING\";\n})(MetadataAttributeType || (MetadataAttributeType = {}));\nvar MomokaValidatorError;\n(function(MomokaValidatorError) {\n    MomokaValidatorError[\"BlockCantBeReadFromNode\"] = \"BLOCK_CANT_BE_READ_FROM_NODE\";\n    MomokaValidatorError[\"BlockTooFar\"] = \"BLOCK_TOO_FAR\";\n    MomokaValidatorError[\"CanNotConnectToBundlr\"] = \"CAN_NOT_CONNECT_TO_BUNDLR\";\n    MomokaValidatorError[\"ChainSignatureAlreadyUsed\"] = \"CHAIN_SIGNATURE_ALREADY_USED\";\n    MomokaValidatorError[\"DataCantBeReadFromNode\"] = \"DATA_CANT_BE_READ_FROM_NODE\";\n    MomokaValidatorError[\"EventMismatch\"] = \"EVENT_MISMATCH\";\n    MomokaValidatorError[\"GeneratedPublicationIdMismatch\"] = \"GENERATED_PUBLICATION_ID_MISMATCH\";\n    MomokaValidatorError[\"InvalidEventTimestamp\"] = \"INVALID_EVENT_TIMESTAMP\";\n    MomokaValidatorError[\"InvalidFormattedTypedData\"] = \"INVALID_FORMATTED_TYPED_DATA\";\n    MomokaValidatorError[\"InvalidPointerSetNotNeeded\"] = \"INVALID_POINTER_SET_NOT_NEEDED\";\n    MomokaValidatorError[\"InvalidSignatureSubmitter\"] = \"INVALID_SIGNATURE_SUBMITTER\";\n    MomokaValidatorError[\"InvalidTxId\"] = \"INVALID_TX_ID\";\n    MomokaValidatorError[\"InvalidTypedDataDeadlineTimestamp\"] = \"INVALID_TYPED_DATA_DEADLINE_TIMESTAMP\";\n    MomokaValidatorError[\"NotClosestBlock\"] = \"NOT_CLOSEST_BLOCK\";\n    MomokaValidatorError[\"NoSignatureSubmitter\"] = \"NO_SIGNATURE_SUBMITTER\";\n    MomokaValidatorError[\"PointerFailedVerification\"] = \"POINTER_FAILED_VERIFICATION\";\n    MomokaValidatorError[\"PotentialReorg\"] = \"POTENTIAL_REORG\";\n    MomokaValidatorError[\"PublicationNonceInvalid\"] = \"PUBLICATION_NONCE_INVALID\";\n    MomokaValidatorError[\"PublicationNoneDa\"] = \"PUBLICATION_NONE_DA\";\n    MomokaValidatorError[\"PublicationNoPointer\"] = \"PUBLICATION_NO_POINTER\";\n    MomokaValidatorError[\"PublicationSignerNotAllowed\"] = \"PUBLICATION_SIGNER_NOT_ALLOWED\";\n    MomokaValidatorError[\"SimulationFailed\"] = \"SIMULATION_FAILED\";\n    MomokaValidatorError[\"SimulationNodeCouldNotRun\"] = \"SIMULATION_NODE_COULD_NOT_RUN\";\n    MomokaValidatorError[\"TimestampProofInvalidDaId\"] = \"TIMESTAMP_PROOF_INVALID_DA_ID\";\n    MomokaValidatorError[\"TimestampProofInvalidSignature\"] = \"TIMESTAMP_PROOF_INVALID_SIGNATURE\";\n    MomokaValidatorError[\"TimestampProofInvalidType\"] = \"TIMESTAMP_PROOF_INVALID_TYPE\";\n    MomokaValidatorError[\"TimestampProofNotSubmitter\"] = \"TIMESTAMP_PROOF_NOT_SUBMITTER\";\n    MomokaValidatorError[\"Unknown\"] = \"UNKNOWN\";\n})(MomokaValidatorError || (MomokaValidatorError = {}));\nvar NftCollectionOwnersOrder;\n(function(NftCollectionOwnersOrder) {\n    NftCollectionOwnersOrder[\"FollowersFirst\"] = \"FollowersFirst\";\n    NftCollectionOwnersOrder[\"None\"] = \"None\";\n})(NftCollectionOwnersOrder || (NftCollectionOwnersOrder = {}));\nvar NftContractType;\n(function(NftContractType) {\n    NftContractType[\"Erc721\"] = \"ERC721\";\n    NftContractType[\"Erc1155\"] = \"ERC1155\";\n})(NftContractType || (NftContractType = {}));\nvar NotificationType;\n(function(NotificationType) {\n    NotificationType[\"Acted\"] = \"ACTED\";\n    NotificationType[\"Commented\"] = \"COMMENTED\";\n    NotificationType[\"Followed\"] = \"FOLLOWED\";\n    NotificationType[\"Mentioned\"] = \"MENTIONED\";\n    NotificationType[\"Mirrored\"] = \"MIRRORED\";\n    NotificationType[\"Quoted\"] = \"QUOTED\";\n    NotificationType[\"Reacted\"] = \"REACTED\";\n})(NotificationType || (NotificationType = {}));\nvar OpenActionCategoryType;\n(function(OpenActionCategoryType) {\n    OpenActionCategoryType[\"Collect\"] = \"COLLECT\";\n})(OpenActionCategoryType || (OpenActionCategoryType = {}));\nvar OpenActionModuleType;\n(function(OpenActionModuleType) {\n    OpenActionModuleType[\"LegacyAaveFeeCollectModule\"] = \"LegacyAaveFeeCollectModule\";\n    OpenActionModuleType[\"LegacyErc4626FeeCollectModule\"] = \"LegacyERC4626FeeCollectModule\";\n    OpenActionModuleType[\"LegacyFeeCollectModule\"] = \"LegacyFeeCollectModule\";\n    OpenActionModuleType[\"LegacyFreeCollectModule\"] = \"LegacyFreeCollectModule\";\n    OpenActionModuleType[\"LegacyLimitedFeeCollectModule\"] = \"LegacyLimitedFeeCollectModule\";\n    OpenActionModuleType[\"LegacyLimitedTimedFeeCollectModule\"] = \"LegacyLimitedTimedFeeCollectModule\";\n    OpenActionModuleType[\"LegacyMultirecipientFeeCollectModule\"] = \"LegacyMultirecipientFeeCollectModule\";\n    OpenActionModuleType[\"LegacyRevertCollectModule\"] = \"LegacyRevertCollectModule\";\n    OpenActionModuleType[\"LegacySimpleCollectModule\"] = \"LegacySimpleCollectModule\";\n    OpenActionModuleType[\"LegacyTimedFeeCollectModule\"] = \"LegacyTimedFeeCollectModule\";\n    OpenActionModuleType[\"MultirecipientFeeCollectOpenActionModule\"] = \"MultirecipientFeeCollectOpenActionModule\";\n    OpenActionModuleType[\"SimpleCollectOpenActionModule\"] = \"SimpleCollectOpenActionModule\";\n    OpenActionModuleType[\"UnknownOpenActionModule\"] = \"UnknownOpenActionModule\";\n})(OpenActionModuleType || (OpenActionModuleType = {}));\nvar PoapTokenLayerType;\n(function(PoapTokenLayerType) {\n    PoapTokenLayerType[\"Layer1\"] = \"Layer1\";\n    PoapTokenLayerType[\"Layer2\"] = \"Layer2\";\n})(PoapTokenLayerType || (PoapTokenLayerType = {}));\nvar PopularNftCollectionsOrder;\n(function(PopularNftCollectionsOrder) {\n    PopularNftCollectionsOrder[\"TotalLensProfileOwners\"] = \"TotalLensProfileOwners\";\n    PopularNftCollectionsOrder[\"TotalOwners\"] = \"TotalOwners\";\n})(PopularNftCollectionsOrder || (PopularNftCollectionsOrder = {}));\nvar ProfileActionHistoryType;\n(function(ProfileActionHistoryType) {\n    ProfileActionHistoryType[\"Acted\"] = \"ACTED\";\n    ProfileActionHistoryType[\"Blocked\"] = \"BLOCKED\";\n    ProfileActionHistoryType[\"Collected\"] = \"COLLECTED\";\n    ProfileActionHistoryType[\"Comment\"] = \"COMMENT\";\n    ProfileActionHistoryType[\"Follow\"] = \"FOLLOW\";\n    ProfileActionHistoryType[\"LinkHandle\"] = \"LINK_HANDLE\";\n    ProfileActionHistoryType[\"LoggedIn\"] = \"LOGGED_IN\";\n    ProfileActionHistoryType[\"Mirror\"] = \"MIRROR\";\n    ProfileActionHistoryType[\"Post\"] = \"POST\";\n    ProfileActionHistoryType[\"Quote\"] = \"QUOTE\";\n    ProfileActionHistoryType[\"RefreshAuthToken\"] = \"REFRESH_AUTH_TOKEN\";\n    ProfileActionHistoryType[\"SetProfileMetadata\"] = \"SET_PROFILE_METADATA\";\n    ProfileActionHistoryType[\"SetProfileModule\"] = \"SET_PROFILE_MODULE\";\n    ProfileActionHistoryType[\"Unblocked\"] = \"UNBLOCKED\";\n    ProfileActionHistoryType[\"Unfollow\"] = \"UNFOLLOW\";\n    ProfileActionHistoryType[\"UnlinkHandle\"] = \"UNLINK_HANDLE\";\n})(ProfileActionHistoryType || (ProfileActionHistoryType = {}));\nvar ProfileInterestTypes;\n(function(ProfileInterestTypes) {\n    ProfileInterestTypes[\"ArtEntertainment\"] = \"ART_ENTERTAINMENT\";\n    ProfileInterestTypes[\"ArtEntertainmentAnime\"] = \"ART_ENTERTAINMENT__ANIME\";\n    ProfileInterestTypes[\"ArtEntertainmentArt\"] = \"ART_ENTERTAINMENT__ART\";\n    ProfileInterestTypes[\"ArtEntertainmentBooks\"] = \"ART_ENTERTAINMENT__BOOKS\";\n    ProfileInterestTypes[\"ArtEntertainmentDesign\"] = \"ART_ENTERTAINMENT__DESIGN\";\n    ProfileInterestTypes[\"ArtEntertainmentFashion\"] = \"ART_ENTERTAINMENT__FASHION\";\n    ProfileInterestTypes[\"ArtEntertainmentFilmTv\"] = \"ART_ENTERTAINMENT__FILM_TV\";\n    ProfileInterestTypes[\"ArtEntertainmentMemes\"] = \"ART_ENTERTAINMENT__MEMES\";\n    ProfileInterestTypes[\"ArtEntertainmentMusic\"] = \"ART_ENTERTAINMENT__MUSIC\";\n    ProfileInterestTypes[\"ArtEntertainmentPhotography\"] = \"ART_ENTERTAINMENT__PHOTOGRAPHY\";\n    ProfileInterestTypes[\"Business\"] = \"BUSINESS\";\n    ProfileInterestTypes[\"BusinessCreatorEconomy\"] = \"BUSINESS__CREATOR_ECONOMY\";\n    ProfileInterestTypes[\"BusinessFinance\"] = \"BUSINESS__FINANCE\";\n    ProfileInterestTypes[\"BusinessMarketing\"] = \"BUSINESS__MARKETING\";\n    ProfileInterestTypes[\"Career\"] = \"CAREER\";\n    ProfileInterestTypes[\"Crypto\"] = \"CRYPTO\";\n    ProfileInterestTypes[\"CryptoBitcoin\"] = \"CRYPTO__BITCOIN\";\n    ProfileInterestTypes[\"CryptoDaos\"] = \"CRYPTO__DAOS\";\n    ProfileInterestTypes[\"CryptoDefi\"] = \"CRYPTO__DEFI\";\n    ProfileInterestTypes[\"CryptoEthereum\"] = \"CRYPTO__ETHEREUM\";\n    ProfileInterestTypes[\"CryptoGm\"] = \"CRYPTO__GM\";\n    ProfileInterestTypes[\"CryptoGovernance\"] = \"CRYPTO__GOVERNANCE\";\n    ProfileInterestTypes[\"CryptoL1\"] = \"CRYPTO__L1\";\n    ProfileInterestTypes[\"CryptoL2\"] = \"CRYPTO__L2\";\n    ProfileInterestTypes[\"CryptoMetaverse\"] = \"CRYPTO__METAVERSE\";\n    ProfileInterestTypes[\"CryptoNft\"] = \"CRYPTO__NFT\";\n    ProfileInterestTypes[\"CryptoRekt\"] = \"CRYPTO__REKT\";\n    ProfileInterestTypes[\"CryptoScaling\"] = \"CRYPTO__SCALING\";\n    ProfileInterestTypes[\"CryptoWeb3\"] = \"CRYPTO__WEB3\";\n    ProfileInterestTypes[\"CryptoWeb3Social\"] = \"CRYPTO__WEB3_SOCIAL\";\n    ProfileInterestTypes[\"Education\"] = \"EDUCATION\";\n    ProfileInterestTypes[\"FamilyParenting\"] = \"FAMILY_PARENTING\";\n    ProfileInterestTypes[\"FoodDrink\"] = \"FOOD_DRINK\";\n    ProfileInterestTypes[\"FoodDrinkBeer\"] = \"FOOD_DRINK__BEER\";\n    ProfileInterestTypes[\"FoodDrinkCocktails\"] = \"FOOD_DRINK__COCKTAILS\";\n    ProfileInterestTypes[\"FoodDrinkCooking\"] = \"FOOD_DRINK__COOKING\";\n    ProfileInterestTypes[\"FoodDrinkRestaurants\"] = \"FOOD_DRINK__RESTAURANTS\";\n    ProfileInterestTypes[\"FoodDrinkWine\"] = \"FOOD_DRINK__WINE\";\n    ProfileInterestTypes[\"HealthFitness\"] = \"HEALTH_FITNESS\";\n    ProfileInterestTypes[\"HealthFitnessBiohacking\"] = \"HEALTH_FITNESS__BIOHACKING\";\n    ProfileInterestTypes[\"HealthFitnessExercise\"] = \"HEALTH_FITNESS__EXERCISE\";\n    ProfileInterestTypes[\"HobbiesInterests\"] = \"HOBBIES_INTERESTS\";\n    ProfileInterestTypes[\"HobbiesInterestsArtsCrafts\"] = \"HOBBIES_INTERESTS__ARTS_CRAFTS\";\n    ProfileInterestTypes[\"HobbiesInterestsCars\"] = \"HOBBIES_INTERESTS__CARS\";\n    ProfileInterestTypes[\"HobbiesInterestsCollecting\"] = \"HOBBIES_INTERESTS__COLLECTING\";\n    ProfileInterestTypes[\"HobbiesInterestsGaming\"] = \"HOBBIES_INTERESTS__GAMING\";\n    ProfileInterestTypes[\"HobbiesInterestsSports\"] = \"HOBBIES_INTERESTS__SPORTS\";\n    ProfileInterestTypes[\"HobbiesInterestsTravel\"] = \"HOBBIES_INTERESTS__TRAVEL\";\n    ProfileInterestTypes[\"HomeGarden\"] = \"HOME_GARDEN\";\n    ProfileInterestTypes[\"HomeGardenAnimals\"] = \"HOME_GARDEN__ANIMALS\";\n    ProfileInterestTypes[\"HomeGardenGardening\"] = \"HOME_GARDEN__GARDENING\";\n    ProfileInterestTypes[\"HomeGardenHomeImprovement\"] = \"HOME_GARDEN__HOME_IMPROVEMENT\";\n    ProfileInterestTypes[\"HomeGardenNature\"] = \"HOME_GARDEN__NATURE\";\n    ProfileInterestTypes[\"LawGovernmentPolitics\"] = \"LAW_GOVERNMENT_POLITICS\";\n    ProfileInterestTypes[\"LawGovernmentPoliticsRegulation\"] = \"LAW_GOVERNMENT_POLITICS__REGULATION\";\n    ProfileInterestTypes[\"Lens\"] = \"LENS\";\n    ProfileInterestTypes[\"News\"] = \"NEWS\";\n    ProfileInterestTypes[\"Nsfw\"] = \"NSFW\";\n    ProfileInterestTypes[\"Technology\"] = \"TECHNOLOGY\";\n    ProfileInterestTypes[\"TechnologyAiMl\"] = \"TECHNOLOGY__AI_ML\";\n    ProfileInterestTypes[\"TechnologyBiotech\"] = \"TECHNOLOGY__BIOTECH\";\n    ProfileInterestTypes[\"TechnologyProgramming\"] = \"TECHNOLOGY__PROGRAMMING\";\n    ProfileInterestTypes[\"TechnologyScience\"] = \"TECHNOLOGY__SCIENCE\";\n    ProfileInterestTypes[\"TechnologyTools\"] = \"TECHNOLOGY__TOOLS\";\n})(ProfileInterestTypes || (ProfileInterestTypes = {}));\nvar PublicationContentWarningType;\n(function(PublicationContentWarningType) {\n    PublicationContentWarningType[\"Nsfw\"] = \"NSFW\";\n    PublicationContentWarningType[\"Sensitive\"] = \"SENSITIVE\";\n    PublicationContentWarningType[\"Spoiler\"] = \"SPOILER\";\n})(PublicationContentWarningType || (PublicationContentWarningType = {}));\nvar PublicationMetadataLicenseType;\n(function(PublicationMetadataLicenseType) {\n    PublicationMetadataLicenseType[\"Cco\"] = \"CCO\";\n    PublicationMetadataLicenseType[\"CcBy\"] = \"CC_BY\";\n    PublicationMetadataLicenseType[\"CcByNc\"] = \"CC_BY_NC\";\n    PublicationMetadataLicenseType[\"CcByNd\"] = \"CC_BY_ND\";\n    PublicationMetadataLicenseType[\"TbnlCDtsaNplLedger\"] = \"TBNL_C_DTSA_NPL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlCDtsaNplLegal\"] = \"TBNL_C_DTSA_NPL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlCDtsaPlLedger\"] = \"TBNL_C_DTSA_PL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlCDtsaPlLegal\"] = \"TBNL_C_DTSA_PL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlCDtNplLedger\"] = \"TBNL_C_DT_NPL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlCDtNplLegal\"] = \"TBNL_C_DT_NPL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlCDtPlLedger\"] = \"TBNL_C_DT_PL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlCDtPlLegal\"] = \"TBNL_C_DT_PL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlCDNplLedger\"] = \"TBNL_C_D_NPL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlCDNplLegal\"] = \"TBNL_C_D_NPL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlCDPlLedger\"] = \"TBNL_C_D_PL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlCDPlLegal\"] = \"TBNL_C_D_PL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlCNdNplLedger\"] = \"TBNL_C_ND_NPL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlCNdNplLegal\"] = \"TBNL_C_ND_NPL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlCNdPlLedger\"] = \"TBNL_C_ND_PL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlCNdPlLegal\"] = \"TBNL_C_ND_PL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlNcDtsaNplLedger\"] = \"TBNL_NC_DTSA_NPL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlNcDtsaNplLegal\"] = \"TBNL_NC_DTSA_NPL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlNcDtsaPlLedger\"] = \"TBNL_NC_DTSA_PL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlNcDtsaPlLegal\"] = \"TBNL_NC_DTSA_PL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlNcDtNplLedger\"] = \"TBNL_NC_DT_NPL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlNcDtNplLegal\"] = \"TBNL_NC_DT_NPL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlNcDtPlLedger\"] = \"TBNL_NC_DT_PL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlNcDtPlLegal\"] = \"TBNL_NC_DT_PL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlNcDNplLedger\"] = \"TBNL_NC_D_NPL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlNcDNplLegal\"] = \"TBNL_NC_D_NPL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlNcDPlLedger\"] = \"TBNL_NC_D_PL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlNcDPlLegal\"] = \"TBNL_NC_D_PL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlNcNdNplLedger\"] = \"TBNL_NC_ND_NPL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlNcNdNplLegal\"] = \"TBNL_NC_ND_NPL_Legal\";\n    PublicationMetadataLicenseType[\"TbnlNcNdPlLedger\"] = \"TBNL_NC_ND_PL_Ledger\";\n    PublicationMetadataLicenseType[\"TbnlNcNdPlLegal\"] = \"TBNL_NC_ND_PL_Legal\";\n})(PublicationMetadataLicenseType || (PublicationMetadataLicenseType = {}));\nvar PublicationMetadataMainFocusType;\n(function(PublicationMetadataMainFocusType) {\n    PublicationMetadataMainFocusType[\"Article\"] = \"ARTICLE\";\n    PublicationMetadataMainFocusType[\"Audio\"] = \"AUDIO\";\n    PublicationMetadataMainFocusType[\"CheckingIn\"] = \"CHECKING_IN\";\n    PublicationMetadataMainFocusType[\"Embed\"] = \"EMBED\";\n    PublicationMetadataMainFocusType[\"Event\"] = \"EVENT\";\n    PublicationMetadataMainFocusType[\"Image\"] = \"IMAGE\";\n    PublicationMetadataMainFocusType[\"Link\"] = \"LINK\";\n    PublicationMetadataMainFocusType[\"Livestream\"] = \"LIVESTREAM\";\n    PublicationMetadataMainFocusType[\"Mint\"] = \"MINT\";\n    PublicationMetadataMainFocusType[\"ShortVideo\"] = \"SHORT_VIDEO\";\n    PublicationMetadataMainFocusType[\"Space\"] = \"SPACE\";\n    PublicationMetadataMainFocusType[\"Story\"] = \"STORY\";\n    PublicationMetadataMainFocusType[\"TextOnly\"] = \"TEXT_ONLY\";\n    PublicationMetadataMainFocusType[\"ThreeD\"] = \"THREE_D\";\n    PublicationMetadataMainFocusType[\"Transaction\"] = \"TRANSACTION\";\n    PublicationMetadataMainFocusType[\"Video\"] = \"VIDEO\";\n})(PublicationMetadataMainFocusType || (PublicationMetadataMainFocusType = {}));\nvar PublicationMetadataTransactionType;\n(function(PublicationMetadataTransactionType) {\n    PublicationMetadataTransactionType[\"Erc20\"] = \"ERC20\";\n    PublicationMetadataTransactionType[\"Erc721\"] = \"ERC721\";\n    PublicationMetadataTransactionType[\"Other\"] = \"OTHER\";\n})(PublicationMetadataTransactionType || (PublicationMetadataTransactionType = {}));\nvar PublicationReactionType;\n(function(PublicationReactionType) {\n    PublicationReactionType[\"Downvote\"] = \"DOWNVOTE\";\n    PublicationReactionType[\"Upvote\"] = \"UPVOTE\";\n})(PublicationReactionType || (PublicationReactionType = {}));\nvar PublicationReportingFraudSubreason;\n(function(PublicationReportingFraudSubreason) {\n    PublicationReportingFraudSubreason[\"Impersonation\"] = \"IMPERSONATION\";\n    PublicationReportingFraudSubreason[\"Scam\"] = \"SCAM\";\n})(PublicationReportingFraudSubreason || (PublicationReportingFraudSubreason = {}));\nvar PublicationReportingIllegalSubreason;\n(function(PublicationReportingIllegalSubreason) {\n    PublicationReportingIllegalSubreason[\"AnimalAbuse\"] = \"ANIMAL_ABUSE\";\n    PublicationReportingIllegalSubreason[\"DirectThreat\"] = \"DIRECT_THREAT\";\n    PublicationReportingIllegalSubreason[\"HumanAbuse\"] = \"HUMAN_ABUSE\";\n    PublicationReportingIllegalSubreason[\"ThreatIndividual\"] = \"THREAT_INDIVIDUAL\";\n    PublicationReportingIllegalSubreason[\"Violence\"] = \"VIOLENCE\";\n})(PublicationReportingIllegalSubreason || (PublicationReportingIllegalSubreason = {}));\nvar PublicationReportingReason;\n(function(PublicationReportingReason) {\n    PublicationReportingReason[\"Fraud\"] = \"FRAUD\";\n    PublicationReportingReason[\"Illegal\"] = \"ILLEGAL\";\n    PublicationReportingReason[\"Sensitive\"] = \"SENSITIVE\";\n    PublicationReportingReason[\"Spam\"] = \"SPAM\";\n})(PublicationReportingReason || (PublicationReportingReason = {}));\nvar PublicationReportingSensitiveSubreason;\n(function(PublicationReportingSensitiveSubreason) {\n    PublicationReportingSensitiveSubreason[\"Nsfw\"] = \"NSFW\";\n    PublicationReportingSensitiveSubreason[\"Offensive\"] = \"OFFENSIVE\";\n})(PublicationReportingSensitiveSubreason || (PublicationReportingSensitiveSubreason = {}));\nvar PublicationReportingSpamSubreason;\n(function(PublicationReportingSpamSubreason) {\n    PublicationReportingSpamSubreason[\"FakeEngagement\"] = \"FAKE_ENGAGEMENT\";\n    PublicationReportingSpamSubreason[\"LowSignal\"] = \"LOW_SIGNAL\";\n    PublicationReportingSpamSubreason[\"ManipulationAlgo\"] = \"MANIPULATION_ALGO\";\n    PublicationReportingSpamSubreason[\"Misleading\"] = \"MISLEADING\";\n    PublicationReportingSpamSubreason[\"MisuseHashtags\"] = \"MISUSE_HASHTAGS\";\n    PublicationReportingSpamSubreason[\"Repetitive\"] = \"REPETITIVE\";\n    PublicationReportingSpamSubreason[\"SomethingElse\"] = \"SOMETHING_ELSE\";\n    PublicationReportingSpamSubreason[\"Unrelated\"] = \"UNRELATED\";\n})(PublicationReportingSpamSubreason || (PublicationReportingSpamSubreason = {}));\nvar PublicationType;\n(function(PublicationType) {\n    PublicationType[\"Comment\"] = \"COMMENT\";\n    PublicationType[\"Mirror\"] = \"MIRROR\";\n    PublicationType[\"Post\"] = \"POST\";\n    PublicationType[\"Quote\"] = \"QUOTE\";\n})(PublicationType || (PublicationType = {}));\nvar ReferenceModuleType;\n(function(ReferenceModuleType) {\n    ReferenceModuleType[\"DegreesOfSeparationReferenceModule\"] = \"DegreesOfSeparationReferenceModule\";\n    ReferenceModuleType[\"FollowerOnlyReferenceModule\"] = \"FollowerOnlyReferenceModule\";\n    ReferenceModuleType[\"LegacyDegreesOfSeparationReferenceModule\"] = \"LegacyDegreesOfSeparationReferenceModule\";\n    ReferenceModuleType[\"LegacyFollowerOnlyReferenceModule\"] = \"LegacyFollowerOnlyReferenceModule\";\n    ReferenceModuleType[\"UnknownReferenceModule\"] = \"UnknownReferenceModule\";\n})(ReferenceModuleType || (ReferenceModuleType = {}));\nvar RefreshPublicationMetadataResultType;\n(function(RefreshPublicationMetadataResultType) {\n    RefreshPublicationMetadataResultType[\"AlreadyPending\"] = \"ALREADY_PENDING\";\n    RefreshPublicationMetadataResultType[\"Queued\"] = \"QUEUED\";\n    RefreshPublicationMetadataResultType[\"ValidPublicationNotFound\"] = \"VALID_PUBLICATION_NOT_FOUND\";\n})(RefreshPublicationMetadataResultType || (RefreshPublicationMetadataResultType = {}));\nvar RelayErrorReasonType;\n(function(RelayErrorReasonType) {\n    RelayErrorReasonType[\"AppNotAllowed\"] = \"APP_NOT_ALLOWED\";\n    RelayErrorReasonType[\"Expired\"] = \"EXPIRED\";\n    RelayErrorReasonType[\"Failed\"] = \"FAILED\";\n    RelayErrorReasonType[\"NotSponsored\"] = \"NOT_SPONSORED\";\n    RelayErrorReasonType[\"RateLimited\"] = \"RATE_LIMITED\";\n    RelayErrorReasonType[\"WrongWalletSigned\"] = \"WRONG_WALLET_SIGNED\";\n})(RelayErrorReasonType || (RelayErrorReasonType = {}));\nvar RelayRoleKey;\n(function(RelayRoleKey) {\n    RelayRoleKey[\"CreateProfile\"] = \"CREATE_PROFILE\";\n    RelayRoleKey[\"LensManager_1\"] = \"LENS_MANAGER_1\";\n    RelayRoleKey[\"LensManager_2\"] = \"LENS_MANAGER_2\";\n    RelayRoleKey[\"LensManager_3\"] = \"LENS_MANAGER_3\";\n    RelayRoleKey[\"LensManager_4\"] = \"LENS_MANAGER_4\";\n    RelayRoleKey[\"LensManager_5\"] = \"LENS_MANAGER_5\";\n    RelayRoleKey[\"LensManager_6\"] = \"LENS_MANAGER_6\";\n    RelayRoleKey[\"LensManager_7\"] = \"LENS_MANAGER_7\";\n    RelayRoleKey[\"LensManager_8\"] = \"LENS_MANAGER_8\";\n    RelayRoleKey[\"LensManager_9\"] = \"LENS_MANAGER_9\";\n    RelayRoleKey[\"LensManager_10\"] = \"LENS_MANAGER_10\";\n    RelayRoleKey[\"WithSig_1\"] = \"WITH_SIG_1\";\n    RelayRoleKey[\"WithSig_2\"] = \"WITH_SIG_2\";\n    RelayRoleKey[\"WithSig_3\"] = \"WITH_SIG_3\";\n    RelayRoleKey[\"WithSig_4\"] = \"WITH_SIG_4\";\n    RelayRoleKey[\"WithSig_5\"] = \"WITH_SIG_5\";\n    RelayRoleKey[\"WithSig_6\"] = \"WITH_SIG_6\";\n    RelayRoleKey[\"WithSig_7\"] = \"WITH_SIG_7\";\n    RelayRoleKey[\"WithSig_8\"] = \"WITH_SIG_8\";\n    RelayRoleKey[\"WithSig_9\"] = \"WITH_SIG_9\";\n    RelayRoleKey[\"WithSig_10\"] = \"WITH_SIG_10\";\n})(RelayRoleKey || (RelayRoleKey = {}));\nvar SearchPublicationType;\n(function(SearchPublicationType) {\n    SearchPublicationType[\"Comment\"] = \"COMMENT\";\n    SearchPublicationType[\"Post\"] = \"POST\";\n    SearchPublicationType[\"Quote\"] = \"QUOTE\";\n})(SearchPublicationType || (SearchPublicationType = {}));\nvar SupportedFiatType;\n(function(SupportedFiatType) {\n    SupportedFiatType[\"Eur\"] = \"EUR\";\n    SupportedFiatType[\"Gbp\"] = \"GBP\";\n    SupportedFiatType[\"Usd\"] = \"USD\";\n})(SupportedFiatType || (SupportedFiatType = {}));\nvar TagSortCriteriaType;\n(function(TagSortCriteriaType) {\n    TagSortCriteriaType[\"Alphabetical\"] = \"ALPHABETICAL\";\n    TagSortCriteriaType[\"MostPopular\"] = \"MOST_POPULAR\";\n})(TagSortCriteriaType || (TagSortCriteriaType = {}));\nvar TriStateValue;\n(function(TriStateValue) {\n    TriStateValue[\"No\"] = \"NO\";\n    TriStateValue[\"Unknown\"] = \"UNKNOWN\";\n    TriStateValue[\"Yes\"] = \"YES\";\n})(TriStateValue || (TriStateValue = {}));\nvar WorldcoinPhoneVerifyType;\n(function(WorldcoinPhoneVerifyType) {\n    WorldcoinPhoneVerifyType[\"Orb\"] = \"ORB\";\n    WorldcoinPhoneVerifyType[\"Phone\"] = \"PHONE\";\n})(WorldcoinPhoneVerifyType || (WorldcoinPhoneVerifyType = {}));\nconst NetworkAddressFieldsFragmentDoc = \"\\n    fragment NetworkAddressFields on NetworkAddress {\\n  address\\n  chainId\\n}\\n    \";\nconst NftCollectionFieldsFragmentDoc = \"\\n    fragment NftCollectionFields on NftCollection {\\n  name\\n  symbol\\n  contract {\\n    ...NetworkAddressFields\\n  }\\n  contractType\\n  baseUri\\n  verified\\n}\\n    \".concat(NetworkAddressFieldsFragmentDoc);\nconst NftMetadataAttributeFieldsFragmentDoc = \"\\n    fragment NftMetadataAttributeFields on PublicationMarketplaceMetadataAttribute {\\n  displayType\\n  traitType\\n  value\\n}\\n    \";\nconst ImageSetFieldsFragmentDoc = \"\\n    fragment ImageSetFields on ImageSet {\\n  raw {\\n    uri\\n    mimeType\\n  }\\n  optimized {\\n    uri\\n    mimeType\\n    width\\n    height\\n  }\\n}\\n    \";\nconst NftMetadataFieldsFragmentDoc = \"\\n    fragment NftMetadataFields on NftMetadata {\\n  name\\n  description\\n  animationUrl\\n  attributes {\\n    ...NftMetadataAttributeFields\\n  }\\n  externalURL\\n  image {\\n    ...ImageSetFields\\n  }\\n}\\n    \".concat(NftMetadataAttributeFieldsFragmentDoc, \"\\n\").concat(ImageSetFieldsFragmentDoc);\nconst NftOwnerFieldsFragmentDoc = \"\\n    fragment NftOwnerFields on Owner {\\n  address\\n  amount\\n}\\n    \";\nconst NftFieldsFragmentDoc = \"\\n    fragment NftFields on Nft {\\n  collection {\\n    name\\n    symbol\\n  }\\n  tokenId\\n  contentURI\\n  contract {\\n    ...NetworkAddressFields\\n  }\\n  contractType\\n  metadata {\\n    ...NftMetadataFields\\n  }\\n  owner {\\n    ...NftOwnerFields\\n  }\\n  totalSupply\\n}\\n    \".concat(NetworkAddressFieldsFragmentDoc, \"\\n\").concat(NftMetadataFieldsFragmentDoc, \"\\n\").concat(NftOwnerFieldsFragmentDoc);\nconst NftGalleryFieldsFragmentDoc = \"\\n    fragment NftGalleryFields on NftGallery {\\n  name\\n  owner\\n  items {\\n    ...NftFields\\n  }\\n  id\\n  createdAt\\n  updatedAt\\n}\\n    \".concat(NftFieldsFragmentDoc);\nconst MetadataAttributeFieldsFragmentDoc = \"\\n    fragment MetadataAttributeFields on MetadataAttribute {\\n  __typename\\n  type\\n  key\\n  value\\n}\\n    \";\nconst ArticleMetadataV3FieldsFragmentDoc = \"\\n    fragment ArticleMetadataV3Fields on ArticleMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst EncryptableAudioFieldsFragmentDoc = \"\\n    fragment EncryptableAudioFields on EncryptableAudio {\\n  uri\\n  mimeType\\n}\\n    \";\nconst AudioFieldsFragmentDoc = \"\\n    fragment AudioFields on Audio {\\n  uri\\n  mimeType\\n}\\n    \";\nconst EncryptableAudioSetFieldsFragmentDoc = \"\\n    fragment EncryptableAudioSetFields on EncryptableAudioSet {\\n  raw {\\n    ...EncryptableAudioFields\\n  }\\n  optimized {\\n    ...AudioFields\\n  }\\n}\\n    \".concat(EncryptableAudioFieldsFragmentDoc, \"\\n\").concat(AudioFieldsFragmentDoc);\nconst EncryptableImageFieldsFragmentDoc = \"\\n    fragment EncryptableImageFields on EncryptableImage {\\n  uri\\n  mimeType\\n}\\n    \";\nconst ImageFieldsFragmentDoc = \"\\n    fragment ImageFields on Image {\\n  uri\\n  mimeType\\n}\\n    \";\nconst EncryptableImageSetFieldsFragmentDoc = \"\\n    fragment EncryptableImageSetFields on EncryptableImageSet {\\n  raw {\\n    ...EncryptableImageFields\\n  }\\n  optimized {\\n    ...ImageFields\\n  }\\n}\\n    \".concat(EncryptableImageFieldsFragmentDoc, \"\\n\").concat(ImageFieldsFragmentDoc);\nconst PublicationMetadataMediaAudioFieldsFragmentDoc = \"\\n    fragment PublicationMetadataMediaAudioFields on PublicationMetadataMediaAudio {\\n  audio {\\n    ...EncryptableAudioSetFields\\n  }\\n  cover {\\n    ...EncryptableImageSetFields\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  duration\\n  license\\n  credits\\n  artist\\n  genre\\n  recordLabel\\n  lyrics\\n}\\n    \".concat(EncryptableAudioSetFieldsFragmentDoc, \"\\n\").concat(EncryptableImageSetFieldsFragmentDoc, \"\\n\").concat(MetadataAttributeFieldsFragmentDoc);\nconst AudioMetadataV3FieldsFragmentDoc = \"\\n    fragment AudioMetadataV3Fields on AudioMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  asset {\\n    ...PublicationMetadataMediaAudioFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc, \"\\n\").concat(PublicationMetadataMediaAudioFieldsFragmentDoc);\nconst CheckingInMetadataV3FieldsFragmentDoc = \"\\n    fragment CheckingInMetadataV3Fields on CheckingInMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst EmbedMetadataV3FieldsFragmentDoc = \"\\n    fragment EmbedMetadataV3Fields on EmbedMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst EventMetadataV3FieldsFragmentDoc = \"\\n    fragment EventMetadataV3Fields on EventMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  contentWarning\\n  tags\\n  locale\\n  startsAt\\n  endsAt\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst PublicationMetadataMediaImageFieldsFragmentDoc = \"\\n    fragment PublicationMetadataMediaImageFields on PublicationMetadataMediaImage {\\n  image {\\n    ...EncryptableImageSetFields\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  license\\n  altTag\\n}\\n    \".concat(EncryptableImageSetFieldsFragmentDoc, \"\\n\").concat(MetadataAttributeFieldsFragmentDoc);\nconst ImageMetadataV3FieldsFragmentDoc = \"\\n    fragment ImageMetadataV3Fields on ImageMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  asset {\\n    ...PublicationMetadataMediaImageFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc, \"\\n\").concat(PublicationMetadataMediaImageFieldsFragmentDoc);\nconst LinkMetadataV3FieldsFragmentDoc = \"\\n    fragment LinkMetadataV3Fields on LinkMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst LiveStreamMetadataV3FieldsFragmentDoc = \"\\n    fragment LiveStreamMetadataV3Fields on LiveStreamMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n  startsAt\\n  endsAt\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst MintMetadataV3FieldsFragmentDoc = \"\\n    fragment MintMetadataV3Fields on MintMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst SpaceMetadataV3FieldsFragmentDoc = \"\\n    fragment SpaceMetadataV3Fields on SpaceMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst EncryptableVideoFieldsFragmentDoc = \"\\n    fragment EncryptableVideoFields on EncryptableVideo {\\n  uri\\n  mimeType\\n}\\n    \";\nconst VideoFieldsFragmentDoc = \"\\n    fragment VideoFields on Video {\\n  uri\\n  mimeType\\n}\\n    \";\nconst EncryptableVideoSetFieldsFragmentDoc = \"\\n    fragment EncryptableVideoSetFields on EncryptableVideoSet {\\n  raw {\\n    ...EncryptableVideoFields\\n  }\\n  optimized {\\n    ...VideoFields\\n  }\\n}\\n    \".concat(EncryptableVideoFieldsFragmentDoc, \"\\n\").concat(VideoFieldsFragmentDoc);\nconst PublicationMetadataMediaVideoFieldsFragmentDoc = \"\\n    fragment PublicationMetadataMediaVideoFields on PublicationMetadataMediaVideo {\\n  video {\\n    ...EncryptableVideoSetFields\\n  }\\n  cover {\\n    ...EncryptableImageSetFields\\n  }\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  duration\\n  license\\n  altTag\\n}\\n    \".concat(EncryptableVideoSetFieldsFragmentDoc, \"\\n\").concat(EncryptableImageSetFieldsFragmentDoc, \"\\n\").concat(MetadataAttributeFieldsFragmentDoc);\nconst StoryMetadataV3FieldsFragmentDoc = \"\\n    fragment StoryMetadataV3Fields on StoryMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  asset {\\n    ... on PublicationMetadataMediaAudio {\\n      ...PublicationMetadataMediaAudioFields\\n    }\\n    ... on PublicationMetadataMediaImage {\\n      ...PublicationMetadataMediaImageFields\\n    }\\n    ... on PublicationMetadataMediaVideo {\\n      ...PublicationMetadataMediaVideoFields\\n    }\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc, \"\\n\").concat(PublicationMetadataMediaAudioFieldsFragmentDoc, \"\\n\").concat(PublicationMetadataMediaImageFieldsFragmentDoc, \"\\n\").concat(PublicationMetadataMediaVideoFieldsFragmentDoc);\nconst TextOnlyMetadataV3FieldsFragmentDoc = \"\\n    fragment TextOnlyMetadataV3Fields on TextOnlyMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst ThreeDMetadataV3FieldsFragmentDoc = \"\\n    fragment ThreeDMetadataV3Fields on ThreeDMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst TransactionMetadataV3FieldsFragmentDoc = \"\\n    fragment TransactionMetadataV3Fields on TransactionMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc);\nconst VideoMetadataV3FieldsFragmentDoc = \"\\n    fragment VideoMetadataV3Fields on VideoMetadataV3 {\\n  attributes {\\n    ...MetadataAttributeFields\\n  }\\n  asset {\\n    ...PublicationMetadataMediaVideoFields\\n  }\\n  content\\n  contentWarning\\n  tags\\n  locale\\n}\\n    \".concat(MetadataAttributeFieldsFragmentDoc, \"\\n\").concat(PublicationMetadataMediaVideoFieldsFragmentDoc);\nconst AnyPublicationMetadataFieldsFragmentDoc = \"\\n    fragment AnyPublicationMetadataFields on PublicationMetadata {\\n  ... on ArticleMetadataV3 {\\n    ...ArticleMetadataV3Fields\\n  }\\n  ... on AudioMetadataV3 {\\n    ...AudioMetadataV3Fields\\n  }\\n  ... on CheckingInMetadataV3 {\\n    ...CheckingInMetadataV3Fields\\n  }\\n  ... on EmbedMetadataV3 {\\n    ...EmbedMetadataV3Fields\\n  }\\n  ... on EventMetadataV3 {\\n    ...EventMetadataV3Fields\\n  }\\n  ... on ImageMetadataV3 {\\n    ...ImageMetadataV3Fields\\n  }\\n  ... on LinkMetadataV3 {\\n    ...LinkMetadataV3Fields\\n  }\\n  ... on LiveStreamMetadataV3 {\\n    ...LiveStreamMetadataV3Fields\\n  }\\n  ... on MintMetadataV3 {\\n    ...MintMetadataV3Fields\\n  }\\n  ... on SpaceMetadataV3 {\\n    ...SpaceMetadataV3Fields\\n  }\\n  ... on StoryMetadataV3 {\\n    ...StoryMetadataV3Fields\\n  }\\n  ... on TextOnlyMetadataV3 {\\n    ...TextOnlyMetadataV3Fields\\n  }\\n  ... on ThreeDMetadataV3 {\\n    ...ThreeDMetadataV3Fields\\n  }\\n  ... on TransactionMetadataV3 {\\n    ...TransactionMetadataV3Fields\\n  }\\n  ... on VideoMetadataV3 {\\n    ...VideoMetadataV3Fields\\n  }\\n}\\n    \".concat(ArticleMetadataV3FieldsFragmentDoc, \"\\n\").concat(AudioMetadataV3FieldsFragmentDoc, \"\\n\").concat(CheckingInMetadataV3FieldsFragmentDoc, \"\\n\").concat(EmbedMetadataV3FieldsFragmentDoc, \"\\n\").concat(EventMetadataV3FieldsFragmentDoc, \"\\n\").concat(ImageMetadataV3FieldsFragmentDoc, \"\\n\").concat(LinkMetadataV3FieldsFragmentDoc, \"\\n\").concat(LiveStreamMetadataV3FieldsFragmentDoc, \"\\n\").concat(MintMetadataV3FieldsFragmentDoc, \"\\n\").concat(SpaceMetadataV3FieldsFragmentDoc, \"\\n\").concat(StoryMetadataV3FieldsFragmentDoc, \"\\n\").concat(TextOnlyMetadataV3FieldsFragmentDoc, \"\\n\").concat(ThreeDMetadataV3FieldsFragmentDoc, \"\\n\").concat(TransactionMetadataV3FieldsFragmentDoc, \"\\n\").concat(VideoMetadataV3FieldsFragmentDoc);\nconst Erc20FieldsFragmentDoc = \"\\n    fragment Erc20Fields on Asset {\\n  ... on Erc20 {\\n    name\\n    symbol\\n    decimals\\n    contract {\\n      ...NetworkAddressFields\\n    }\\n  }\\n}\\n    \".concat(NetworkAddressFieldsFragmentDoc);\nconst AmountFieldsFragmentDoc = \"\\n    fragment AmountFields on Amount {\\n  asset {\\n    ...Erc20Fields\\n  }\\n  value\\n}\\n    \".concat(Erc20FieldsFragmentDoc);\nconst FollowModuleFieldsFragmentDoc = \"\\n    fragment FollowModuleFields on FollowModule {\\n  ... on FeeFollowModuleSettings {\\n    contract {\\n      ...NetworkAddressFields\\n    }\\n    amount {\\n      ...AmountFields\\n    }\\n    recipient\\n  }\\n  ... on RevertFollowModuleSettings {\\n    contract {\\n      ...NetworkAddressFields\\n    }\\n  }\\n  ... on UnknownFollowModuleSettings {\\n    contract {\\n      ...NetworkAddressFields\\n    }\\n    followModuleReturnData\\n  }\\n}\\n    \".concat(NetworkAddressFieldsFragmentDoc, \"\\n\").concat(AmountFieldsFragmentDoc);\nconst HandleInfoFragmentDoc = \"\\n    fragment HandleInfo on HandleInfo {\\n  __typename\\n  id\\n  fullHandle\\n  namespace\\n  localName\\n  suggestedFormatted {\\n    full\\n    localName\\n  }\\n  linkedTo {\\n    contract {\\n      ...NetworkAddressFields\\n    }\\n    nftTokenId\\n  }\\n  ownedBy\\n}\\n    \".concat(NetworkAddressFieldsFragmentDoc);\nconst ProfileFieldsFragmentDoc = \"\\n    fragment ProfileFields on Profile {\\n  id\\n  ownedBy {\\n    ...NetworkAddressFields\\n  }\\n  signless\\n  sponsor\\n  txHash\\n  createdAt\\n  stats {\\n    id\\n    followers\\n    following\\n    comments\\n    posts\\n    mirrors\\n    quotes\\n    publications\\n    reactions\\n    countOpenActions\\n  }\\n  operations {\\n    id\\n    isBlockedByMe {\\n      value\\n      isFinalisedOnchain\\n    }\\n    isFollowedByMe {\\n      value\\n      isFinalisedOnchain\\n    }\\n    isFollowingMe {\\n      value\\n      isFinalisedOnchain\\n    }\\n    canBlock\\n    canUnblock\\n    canFollow\\n    canUnfollow\\n  }\\n  interests\\n  guardian {\\n    protected\\n    cooldownEndsOn\\n  }\\n  invitedBy {\\n    id\\n  }\\n  invitesLeft\\n  onchainIdentity {\\n    proofOfHumanity\\n    ens {\\n      name\\n    }\\n    sybilDotOrg {\\n      verified\\n      source {\\n        twitter {\\n          handle\\n        }\\n      }\\n    }\\n    worldcoin {\\n      isHuman\\n    }\\n  }\\n  followNftAddress {\\n    address\\n    chainId\\n  }\\n  metadata {\\n    bio\\n    attributes {\\n      ...MetadataAttributeFields\\n    }\\n    displayName\\n    picture {\\n      ... on ImageSet {\\n        optimized {\\n          uri\\n        }\\n      }\\n      ... on NftImage {\\n        image {\\n          optimized {\\n            uri\\n          }\\n        }\\n      }\\n    }\\n  }\\n  followModule {\\n    ...FollowModuleFields\\n  }\\n  handle {\\n    ...HandleInfo\\n  }\\n}\\n    \".concat(NetworkAddressFieldsFragmentDoc, \"\\n\").concat(MetadataAttributeFieldsFragmentDoc, \"\\n\").concat(FollowModuleFieldsFragmentDoc, \"\\n\").concat(HandleInfoFragmentDoc);\nconst AddProfileInterestsDocument = \"\\n    mutation AddProfileInterests($request: ProfileInterestsRequest!) {\\n  addProfileInterests(request: $request)\\n}\\n    \";\nconst useAddProfileInterestsMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"AddProfileInterests\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, AddProfileInterestsDocument, variables)(), options);\n};\nconst AuthenticateDocument = \"\\n    mutation Authenticate($request: SignedAuthChallenge!) {\\n  authenticate(request: $request) {\\n    accessToken\\n    refreshToken\\n  }\\n}\\n    \";\nconst useAuthenticateMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"Authenticate\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, AuthenticateDocument, variables)(), options);\n};\nconst CreateBlockProfilesTypedDataDocument = \"\\n    mutation CreateBlockProfilesTypedData($request: BlockRequest!) {\\n  createBlockProfilesTypedData(request: $request) {\\n    id\\n    expiresAt\\n    typedData {\\n      value {\\n        nonce\\n        deadline\\n        byProfileId\\n        idsOfProfilesToSetBlockStatus\\n        blockStatus\\n      }\\n      domain {\\n        name\\n        chainId\\n        version\\n        verifyingContract\\n      }\\n      types {\\n        SetBlockStatus {\\n          name\\n          type\\n        }\\n      }\\n    }\\n  }\\n}\\n    \";\nconst useCreateBlockProfilesTypedDataMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"CreateBlockProfilesTypedData\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, CreateBlockProfilesTypedDataDocument, variables)(), options);\n};\nconst BlockDocument = \"\\n    mutation Block($request: BlockRequest!) {\\n  block(request: $request) {\\n    ... on RelaySuccess {\\n      txHash\\n      txId\\n    }\\n    ... on LensProfileManagerRelayError {\\n      reason\\n    }\\n  }\\n}\\n    \";\nconst useBlockMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"Block\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, BlockDocument, variables)(), options);\n};\nconst BroadcastOnchainDocument = \"\\n    mutation BroadcastOnchain($request: BroadcastRequest!) {\\n  broadcastOnchain(request: $request) {\\n    ... on RelaySuccess {\\n      __typename\\n      txHash\\n      txId\\n    }\\n    ... on RelayError {\\n      __typename\\n      reason\\n    }\\n  }\\n}\\n    \";\nconst useBroadcastOnchainMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"BroadcastOnchain\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, BroadcastOnchainDocument, variables)(), options);\n};\nconst BroadcastOnMomokaDocument = \"\\n    mutation BroadcastOnMomoka($request: BroadcastRequest!) {\\n  broadcastOnMomoka(request: $request) {\\n    ... on CreateMomokaPublicationResult {\\n      id\\n      proof\\n      momokaId\\n    }\\n    ... on RelayError {\\n      __typename\\n      reason\\n    }\\n  }\\n}\\n    \";\nconst useBroadcastOnMomokaMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"BroadcastOnMomoka\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, BroadcastOnMomokaDocument, variables)(), options);\n};\nconst ChallengeDocument = \"\\n    query Challenge($request: ChallengeRequest!) {\\n  challenge(request: $request) {\\n    id\\n    text\\n  }\\n}\\n    \";\nconst useChallengeQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"Challenge\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, ChallengeDocument, variables), options);\n};\nconst CreateProfileWithHandleDocument = \"\\n    mutation CreateProfileWithHandle($request: CreateProfileWithHandleRequest!) {\\n  createProfileWithHandle(request: $request) {\\n    ... on RelaySuccess {\\n      txHash\\n      txId\\n    }\\n    ... on CreateProfileWithHandleErrorResult {\\n      reason\\n    }\\n  }\\n}\\n    \";\nconst useCreateProfileWithHandleMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"CreateProfileWithHandle\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, CreateProfileWithHandleDocument, variables)(), options);\n};\nconst SetDefaultProfileDocument = \"\\n    mutation SetDefaultProfile($request: SetDefaultProfileRequest!) {\\n  setDefaultProfile(request: $request)\\n}\\n    \";\nconst useSetDefaultProfileMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"SetDefaultProfile\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, SetDefaultProfileDocument, variables)(), options);\n};\nconst GetDefaultProfileDocument = \"\\n    query GetDefaultProfile($request: DefaultProfileRequest!) {\\n  defaultProfile(request: $request) {\\n    ...ProfileFields\\n  }\\n}\\n    \".concat(ProfileFieldsFragmentDoc);\nconst useGetDefaultProfileQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"GetDefaultProfile\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, GetDefaultProfileDocument, variables), options);\n};\nconst DismissRecommendedProfilesDocument = \"\\n    mutation DismissRecommendedProfiles($request: DismissRecommendedProfilesRequest!) {\\n  dismissRecommendedProfiles(request: $request)\\n}\\n    \";\nconst useDismissRecommendedProfilesMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"DismissRecommendedProfiles\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, DismissRecommendedProfilesDocument, variables)(), options);\n};\nconst GetInvitedProfilesDocument = \"\\n    query GetInvitedProfiles {\\n  invitedProfiles {\\n    by\\n    profileMinted {\\n      createdAt\\n    }\\n    when\\n  }\\n}\\n    \";\nconst useGetInvitedProfilesQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(variables === undefined ? [\n        \"GetInvitedProfiles\"\n    ] : [\n        \"GetInvitedProfiles\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, GetInvitedProfilesDocument, variables), options);\n};\nconst ProfileDocument = \"\\n    query Profile($request: ProfileRequest!) {\\n  profile(request: $request) {\\n    ...ProfileFields\\n  }\\n}\\n    \".concat(ProfileFieldsFragmentDoc);\nconst useProfileQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"Profile\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, ProfileDocument, variables), options);\n};\nconst ProfilesDocument = \"\\n    query Profiles($request: ProfilesRequest!) {\\n  profiles(request: $request) {\\n    items {\\n      ...ProfileFields\\n    }\\n    pageInfo {\\n      next\\n      prev\\n    }\\n  }\\n}\\n    \".concat(ProfileFieldsFragmentDoc);\nconst useProfilesQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"Profiles\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, ProfilesDocument, variables), options);\n};\nconst NftsDocument = \"\\n    query Nfts($request: NftsRequest!) {\\n  nfts(request: $request) {\\n    items {\\n      ...NftFields\\n    }\\n    pageInfo {\\n      prev\\n      next\\n    }\\n  }\\n}\\n    \".concat(NftFieldsFragmentDoc);\nconst useNftsQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"Nfts\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, NftsDocument, variables), options);\n};\nconst ProfileActionHistoryDocument = \"\\n    query ProfileActionHistory($request: ProfileActionHistoryRequest!) {\\n  profileActionHistory(request: $request) {\\n    items {\\n      id\\n    }\\n    pageInfo {\\n      prev\\n      next\\n    }\\n  }\\n}\\n    \";\nconst useProfileActionHistoryQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"ProfileActionHistory\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, ProfileActionHistoryDocument, variables), options);\n};\nconst ProfileAlreadyInvitedDocument = \"\\n    query ProfileAlreadyInvited($request: AlreadyInvitedCheckRequest!) {\\n  profileAlreadyInvited(request: $request)\\n}\\n    \";\nconst useProfileAlreadyInvitedQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"ProfileAlreadyInvited\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, ProfileAlreadyInvitedDocument, variables), options);\n};\nconst ProfileRecommendationsDocument = \"\\n    query ProfileRecommendations($request: ProfileRecommendationsRequest!) {\\n  profileRecommendations(request: $request) {\\n    items {\\n      ...ProfileFields\\n    }\\n    pageInfo {\\n      prev\\n      next\\n    }\\n  }\\n}\\n    \".concat(ProfileFieldsFragmentDoc);\nconst useProfileRecommendationsQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"ProfileRecommendations\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, ProfileRecommendationsDocument, variables), options);\n};\nconst ProfilesManagedDocument = \"\\n    query ProfilesManaged($request: ProfilesManagedRequest!) {\\n  profilesManaged(request: $request) {\\n    items {\\n      ...ProfileFields\\n    }\\n    pageInfo {\\n      prev\\n      next\\n    }\\n  }\\n}\\n    \".concat(ProfileFieldsFragmentDoc);\nconst useProfilesManagedQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"ProfilesManaged\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, ProfilesManagedDocument, variables), options);\n};\nconst RefreshDocument = \"\\n    mutation Refresh($request: RefreshRequest!) {\\n  refresh(request: $request) {\\n    accessToken\\n    refreshToken\\n  }\\n}\\n    \";\nconst useRefreshMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"Refresh\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, RefreshDocument, variables)(), options);\n};\nconst RemoveProfileInterestsDocument = \"\\n    mutation RemoveProfileInterests($request: ProfileInterestsRequest!) {\\n  removeProfileInterests(request: $request)\\n}\\n    \";\nconst useRemoveProfileInterestsMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"RemoveProfileInterests\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, RemoveProfileInterestsDocument, variables)(), options);\n};\nconst CreateOnchainSetProfileMetadataTypedDataDocument = \"\\n    mutation CreateOnchainSetProfileMetadataTypedData($request: OnchainSetProfileMetadataRequest!) {\\n  createOnchainSetProfileMetadataTypedData(request: $request) {\\n    expiresAt\\n    id\\n    typedData {\\n      domain {\\n        name\\n        chainId\\n        version\\n        verifyingContract\\n      }\\n      types {\\n        SetProfileMetadataURI {\\n          name\\n          type\\n        }\\n      }\\n      value {\\n        nonce\\n        deadline\\n        profileId\\n        metadataURI\\n      }\\n    }\\n  }\\n}\\n    \";\nconst useCreateOnchainSetProfileMetadataTypedDataMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"CreateOnchainSetProfileMetadataTypedData\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, CreateOnchainSetProfileMetadataTypedDataDocument, variables)(), options);\n};\nconst SetProfileMetadataDocument = \"\\n    mutation SetProfileMetadata($request: OnchainSetProfileMetadataRequest!) {\\n  setProfileMetadata(request: $request) {\\n    ... on RelaySuccess {\\n      txHash\\n      txId\\n    }\\n    ... on LensProfileManagerRelayError {\\n      reason\\n    }\\n  }\\n}\\n    \";\nconst useSetProfileMetadataMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"SetProfileMetadata\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, SetProfileMetadataDocument, variables)(), options);\n};\nconst LensTransactionStatusDocument = \"\\n    query LensTransactionStatus($request: LensTransactionStatusRequest!) {\\n  lensTransactionStatus(request: $request) {\\n    __typename\\n    status\\n    txHash\\n    reason\\n    extraInfo\\n  }\\n}\\n    \";\nconst useLensTransactionStatusQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"LensTransactionStatus\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, LensTransactionStatusDocument, variables), options);\n};\nconst TxIdToTxHashDocument = \"\\n    query TxIdToTxHash($for: TxId!) {\\n  txIdToTxHash(for: $for)\\n}\\n    \";\nconst useTxIdToTxHashQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"TxIdToTxHash\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, TxIdToTxHashDocument, variables), options);\n};\nconst CreateUnblockProfilesTypedDataDocument = \"\\n    mutation CreateUnblockProfilesTypedData($request: UnblockRequest!) {\\n  createUnblockProfilesTypedData(request: $request) {\\n    id\\n    expiresAt\\n    typedData {\\n      types {\\n        SetBlockStatus {\\n          name\\n          type\\n        }\\n      }\\n      domain {\\n        name\\n        chainId\\n        version\\n        verifyingContract\\n      }\\n      value {\\n        nonce\\n        deadline\\n        byProfileId\\n        idsOfProfilesToSetBlockStatus\\n        blockStatus\\n      }\\n    }\\n  }\\n}\\n    \";\nconst useCreateUnblockProfilesTypedDataMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"CreateUnblockProfilesTypedData\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, CreateUnblockProfilesTypedDataDocument, variables)(), options);\n};\nconst UnblockDocument = \"\\n    mutation Unblock($request: UnblockRequest!) {\\n  unblock(request: $request) {\\n    ... on RelaySuccess {\\n      txHash\\n      txId\\n    }\\n    ... on LensProfileManagerRelayError {\\n      reason\\n    }\\n  }\\n}\\n    \";\nconst useUnblockMutation = (dataSource, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useMutation)([\n        \"Unblock\"\n    ], (variables)=>fetcher(dataSource.endpoint, dataSource.fetchParams || {}, UnblockDocument, variables)(), options);\n};\nconst UserSigNoncesDocument = \"\\n    query UserSigNonces {\\n  userSigNonces {\\n    lensHubOnchainSigNonce\\n    lensTokenHandleRegistryOnchainSigNonce\\n  }\\n}\\n    \";\nconst useUserSigNoncesQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(variables === undefined ? [\n        \"UserSigNonces\"\n    ] : [\n        \"UserSigNonces\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, UserSigNoncesDocument, variables), options);\n};\nconst VerifyDocument = \"\\n    query Verify($request: VerifyRequest!) {\\n  verify(request: $request)\\n}\\n    \";\nconst useVerifyQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"Verify\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, VerifyDocument, variables), options);\n};\nconst WhoHaveBlockedDocument = \"\\n    query WhoHaveBlocked($request: WhoHaveBlockedRequest!) {\\n  whoHaveBlocked(request: $request) {\\n    items {\\n      ...ProfileFields\\n    }\\n    pageInfo {\\n      prev\\n      next\\n    }\\n  }\\n}\\n    \".concat(ProfileFieldsFragmentDoc);\nconst useWhoHaveBlockedQuery = (dataSource, variables, options)=>{\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([\n        \"WhoHaveBlocked\",\n        variables\n    ], fetcher(dataSource.endpoint, dataSource.fetchParams || {}, WhoHaveBlockedDocument, variables), options);\n};\nconst result = {\n    \"possibleTypes\": {\n        \"AnyPublication\": [\n            \"Comment\",\n            \"Mirror\",\n            \"Post\",\n            \"Quote\"\n        ],\n        \"Asset\": [\n            \"Erc20\"\n        ],\n        \"BroadcastMomokaResult\": [\n            \"CreateMomokaPublicationResult\",\n            \"RelayError\"\n        ],\n        \"ClaimProfileWithHandleResult\": [\n            \"ClaimProfileWithHandleErrorResult\",\n            \"RelaySuccess\"\n        ],\n        \"CommentablePublication\": [\n            \"Post\",\n            \"Quote\"\n        ],\n        \"CreateProfileWithHandleResult\": [\n            \"CreateProfileWithHandleErrorResult\",\n            \"RelaySuccess\"\n        ],\n        \"ExplorePublication\": [\n            \"Post\",\n            \"Quote\"\n        ],\n        \"FeedHighlight\": [\n            \"Post\",\n            \"Quote\"\n        ],\n        \"FollowModule\": [\n            \"FeeFollowModuleSettings\",\n            \"RevertFollowModuleSettings\",\n            \"UnknownFollowModuleSettings\"\n        ],\n        \"LensProfileManagerRelayResult\": [\n            \"LensProfileManagerRelayError\",\n            \"RelaySuccess\"\n        ],\n        \"MirrorablePublication\": [\n            \"Comment\",\n            \"Post\",\n            \"Quote\"\n        ],\n        \"MomokaTransaction\": [\n            \"MomokaCommentTransaction\",\n            \"MomokaMirrorTransaction\",\n            \"MomokaPostTransaction\",\n            \"MomokaQuoteTransaction\"\n        ],\n        \"MomokaVerificationStatus\": [\n            \"MomokaVerificationStatusFailure\",\n            \"MomokaVerificationStatusSuccess\"\n        ],\n        \"Notification\": [\n            \"ActedNotification\",\n            \"CommentNotification\",\n            \"FollowNotification\",\n            \"MentionNotification\",\n            \"MirrorNotification\",\n            \"QuoteNotification\",\n            \"ReactionNotification\"\n        ],\n        \"OpenActionModule\": [\n            \"LegacyAaveFeeCollectModuleSettings\",\n            \"LegacyERC4626FeeCollectModuleSettings\",\n            \"LegacyFeeCollectModuleSettings\",\n            \"LegacyFreeCollectModuleSettings\",\n            \"LegacyLimitedFeeCollectModuleSettings\",\n            \"LegacyLimitedTimedFeeCollectModuleSettings\",\n            \"LegacyMultirecipientFeeCollectModuleSettings\",\n            \"LegacyRevertCollectModuleSettings\",\n            \"LegacySimpleCollectModuleSettings\",\n            \"LegacyTimedFeeCollectModuleSettings\",\n            \"MultirecipientFeeCollectOpenActionSettings\",\n            \"SimpleCollectOpenActionSettings\",\n            \"UnknownOpenActionModuleSettings\"\n        ],\n        \"OpenActionResult\": [\n            \"KnownCollectOpenActionResult\",\n            \"UnknownOpenActionResult\"\n        ],\n        \"PrimaryPublication\": [\n            \"Comment\",\n            \"Post\",\n            \"Quote\"\n        ],\n        \"ProfilePicture\": [\n            \"ImageSet\",\n            \"NftImage\"\n        ],\n        \"PublicationMetadata\": [\n            \"ArticleMetadataV3\",\n            \"AudioMetadataV3\",\n            \"CheckingInMetadataV3\",\n            \"EmbedMetadataV3\",\n            \"EventMetadataV3\",\n            \"ImageMetadataV3\",\n            \"LinkMetadataV3\",\n            \"LiveStreamMetadataV3\",\n            \"MintMetadataV3\",\n            \"SpaceMetadataV3\",\n            \"StoryMetadataV3\",\n            \"TextOnlyMetadataV3\",\n            \"ThreeDMetadataV3\",\n            \"TransactionMetadataV3\",\n            \"VideoMetadataV3\"\n        ],\n        \"PublicationMetadataEncryptionStrategy\": [\n            \"PublicationMetadataLitEncryption\"\n        ],\n        \"PublicationMetadataMedia\": [\n            \"PublicationMetadataMediaAudio\",\n            \"PublicationMetadataMediaImage\",\n            \"PublicationMetadataMediaVideo\"\n        ],\n        \"ReferenceModule\": [\n            \"DegreesOfSeparationReferenceModuleSettings\",\n            \"FollowOnlyReferenceModuleSettings\",\n            \"LegacyDegreesOfSeparationReferenceModuleSettings\",\n            \"LegacyFollowOnlyReferenceModuleSettings\",\n            \"UnknownReferenceModuleSettings\"\n        ],\n        \"RelayMomokaResult\": [\n            \"CreateMomokaPublicationResult\",\n            \"LensProfileManagerRelayError\"\n        ],\n        \"RelayResult\": [\n            \"RelayError\",\n            \"RelaySuccess\"\n        ],\n        \"SecondTierCondition\": [\n            \"AdvancedContractCondition\",\n            \"AndCondition\",\n            \"CollectCondition\",\n            \"EoaOwnershipCondition\",\n            \"Erc20OwnershipCondition\",\n            \"FollowCondition\",\n            \"NftOwnershipCondition\",\n            \"OrCondition\",\n            \"ProfileOwnershipCondition\"\n        ],\n        \"SupportedModule\": [\n            \"KnownSupportedModule\",\n            \"UnknownSupportedModule\"\n        ],\n        \"ThirdTierCondition\": [\n            \"AdvancedContractCondition\",\n            \"CollectCondition\",\n            \"EoaOwnershipCondition\",\n            \"Erc20OwnershipCondition\",\n            \"FollowCondition\",\n            \"NftOwnershipCondition\",\n            \"ProfileOwnershipCondition\"\n        ]\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (result);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./graphql/generated.ts\n"));

/***/ })

});